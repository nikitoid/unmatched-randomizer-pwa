/**
 * –ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤
 * –°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∏–≥—Ä—ã Unmatched
 */

export class Generator {
    constructor(dependencies = {}) {
        this.storage = dependencies.storage;
        this.toast = dependencies.toast;
        this.fixedHero = null;
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
     */
    init() {
        this.loadHeroesData();
        console.log('üé≤ Generator initialized');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≥–µ—Ä–æ—è—Ö
     */
    loadHeroesData() {
        // –ë–∞–∑–æ–≤—ã–µ –≥–µ—Ä–æ–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ Unmatched
        this.heroes = {
            base: [
                {
                    id: 'arthur',
                    name: '–ö–æ—Ä–æ–ª—å –ê—Ä—Ç—É—Ä',
                    set: 'Unmatched: Battle of Legends, Volume One',
                    difficulty: '–°—Ä–µ–¥–Ω—è—è',
                    type: '–ë–ª–∏–∂–Ω–∏–π –±–æ–π',
                    description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–æ—Ä–æ–ª—å —Å –º–µ—á–æ–º –≠–∫—Å–∫–∞–ª–∏–±—É—Ä',
                    image: '/images/heroes/arthur.jpg'
                },
                {
                    id: 'medusa',
                    name: '–ú–µ–¥—É–∑–∞',
                    set: 'Unmatched: Battle of Legends, Volume One',
                    difficulty: '–°–ª–æ–∂–Ω–∞—è',
                    type: '–î–∞–ª—å–Ω–∏–π –±–æ–π',
                    description: '–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ —Å—É—â–µ—Å—Ç–≤–æ —Å –∫–∞–º–µ–Ω–Ω—ã–º –≤–∑–≥–ª—è–¥–æ–º',
                    image: '/images/heroes/medusa.jpg'
                },
                {
                    id: 'alice',
                    name: '–ê–ª–∏—Å–∞',
                    set: 'Unmatched: Battle of Legends, Volume One',
                    difficulty: '–õ–µ–≥–∫–∞—è',
                    type: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è',
                    description: '–î–µ–≤–æ—á–∫–∞ –∏–∑ –°—Ç—Ä–∞–Ω—ã —á—É–¥–µ—Å',
                    image: '/images/heroes/alice.jpg'
                },
                {
                    id: 'sinbad',
                    name: '–°–∏–Ω–¥–±–∞–¥',
                    set: 'Unmatched: Battle of Legends, Volume One',
                    difficulty: '–°—Ä–µ–¥–Ω—è—è',
                    type: '–ë–ª–∏–∂–Ω–∏–π –±–æ–π',
                    description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –º–æ—Ä–µ–ø–ª–∞–≤–∞—Ç–µ–ª—å',
                    image: '/images/heroes/sinbad.jpg'
                }
            ],
            expansions: [
                {
                    id: 'robin-hood',
                    name: '–†–æ–±–∏–Ω –ì—É–¥',
                    set: 'Unmatched: Robin Hood vs Bigfoot',
                    difficulty: '–°—Ä–µ–¥–Ω—è—è',
                    type: '–î–∞–ª—å–Ω–∏–π –±–æ–π',
                    description: '–ë–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π —Ä–∞–∑–±–æ–π–Ω–∏–∫ –∏–∑ –®–µ—Ä–≤—É–¥—Å–∫–æ–≥–æ –ª–µ—Å–∞',
                    image: '/images/heroes/robin-hood.jpg'
                },
                {
                    id: 'bigfoot',
                    name: '–ë–∏–≥—Ñ—É—Ç',
                    set: 'Unmatched: Robin Hood vs Bigfoot',
                    difficulty: '–°–ª–æ–∂–Ω–∞—è',
                    type: '–ë–ª–∏–∂–Ω–∏–π –±–æ–π',
                    description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ –∏–∑ –ª–µ—Å–æ–≤',
                    image: '/images/heroes/bigfoot.jpg'
                },
                {
                    id: 'bruce-lee',
                    name: '–ë—Ä—é—Å –õ–∏',
                    set: 'Unmatched: Bruce Lee',
                    difficulty: '–°–ª–æ–∂–Ω–∞—è',
                    type: '–ë–ª–∏–∂–Ω–∏–π –±–æ–π',
                    description: '–ú–∞—Å—Ç–µ—Ä –±–æ–µ–≤—ã—Ö –∏—Å–∫—É—Å—Å—Ç–≤',
                    image: '/images/heroes/bruce-lee.jpg'
                },
                {
                    id: 'muldoon',
                    name: '–ú–∞–ª–¥—É–Ω',
                    set: 'Unmatched: Jurassic Park - InGen vs Raptors',
                    difficulty: '–°—Ä–µ–¥–Ω—è—è',
                    type: '–î–∞–ª—å–Ω–∏–π –±–æ–π',
                    description: '–û—Ö–æ—Ç–Ω–∏–∫ –Ω–∞ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤',
                    image: '/images/heroes/muldoon.jpg'
                },
                {
                    id: 'raptors',
                    name: '–†–∞–ø—Ç–æ—Ä—ã',
                    set: 'Unmatched: Jurassic Park - InGen vs Raptors',
                    difficulty: '–°–ª–æ–∂–Ω–∞—è',
                    type: '–ë–ª–∏–∂–Ω–∏–π –±–æ–π',
                    description: '–°—Ç–∞—è —É–º–Ω—ã—Ö –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤',
                    image: '/images/heroes/raptors.jpg'
                },
                {
                    id: 'sherlock',
                    name: '–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å',
                    set: 'Unmatched: Cobble & Fog',
                    difficulty: '–°–ª–æ–∂–Ω–∞—è',
                    type: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è',
                    description: '–í–µ–ª–∏–∫–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤',
                    image: '/images/heroes/sherlock.jpg'
                },
                {
                    id: 'dracula',
                    name: '–î—Ä–∞–∫—É–ª–∞',
                    set: 'Unmatched: Cobble & Fog',
                    difficulty: '–°—Ä–µ–¥–Ω—è—è',
                    type: '–ë–ª–∏–∂–Ω–∏–π –±–æ–π',
                    description: '–í–∞–º–ø–∏—Ä-–≥—Ä–∞—Ñ',
                    image: '/images/heroes/dracula.jpg'
                },
                {
                    id: 'jekyll-hyde',
                    name: '–î–∂–µ–∫–∏–ª –∏ –•–∞–π–¥',
                    set: 'Unmatched: Cobble & Fog',
                    difficulty: '–°–ª–æ–∂–Ω–∞—è',
                    type: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è',
                    description: '–î–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å',
                    image: '/images/heroes/jekyll-hyde.jpg'
                },
                {
                    id: 'invisible-man',
                    name: '–ß–µ–ª–æ–≤–µ–∫-–Ω–µ–≤–∏–¥–∏–º–∫–∞',
                    set: 'Unmatched: Cobble & Fog',
                    difficulty: '–°—Ä–µ–¥–Ω—è—è',
                    type: '–î–∞–ª—å–Ω–∏–π –±–æ–π',
                    description: '–ù–µ–≤–∏–¥–∏–º—ã–π –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫',
                    image: '/images/heroes/invisible-man.jpg'
                }
            ]
        };

        // –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤
        this.allHeroes = [...this.heroes.base, ...this.heroes.expansions];
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
     */
    async generateTeam(heroCount = 2, gameMode = 'all') {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            const availableHeroes = this.getAvailableHeroes(gameMode);
            
            if (availableHeroes.length < heroCount) {
                throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ—Ä–æ–µ–≤ –≤ —Ä–µ–∂–∏–º–µ "${gameMode}". –î–æ—Å—Ç—É–ø–Ω–æ: ${availableHeroes.length}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${heroCount}`);
            }

            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã
            let heroesPool = [...availableHeroes];
            const team = [];

            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ—Ä–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –ø–µ—Ä–≤—ã–º
            if (this.fixedHero) {
                const fixedHeroData = heroesPool.find(hero => hero.id === this.fixedHero);
                if (fixedHeroData) {
                    team.push(fixedHeroData);
                    heroesPool = heroesPool.filter(hero => hero.id !== this.fixedHero);
                }
                this.fixedHero = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤
            const remainingCount = heroCount - team.length;
            for (let i = 0; i < remainingCount; i++) {
                const randomIndex = Math.floor(Math.random() * heroesPool.length);
                const selectedHero = heroesPool.splice(randomIndex, 1)[0];
                team.push(selectedHero);
            }

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã
            const teamData = {
                id: this.generateTeamId(),
                heroes: team,
                createdAt: new Date().toISOString(),
                gameMode: gameMode,
                heroCount: heroCount
            };

            console.log(`üé≤ Generated team: ${team.map(h => h.name).join(', ')}`);
            return teamData;

        } catch (error) {
            console.error('Error generating team:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
     */
    getAvailableHeroes(gameMode) {
        switch (gameMode) {
            case 'base':
                return this.heroes.base;
            case 'expansions':
                return this.heroes.expansions;
            case 'all':
            default:
                return this.allHeroes;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
     */
    generateTeamId() {
        return 'team_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–µ—Ä–æ—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    setFixedHero(heroId) {
        this.fixedHero = heroId;
        console.log(`üéØ Fixed hero set: ${heroId}`);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ—Ä–æ–µ –ø–æ ID
     */
    getHeroById(heroId) {
        return this.allHeroes.find(hero => hero.id === heroId);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≥–µ—Ä–æ—è
     */
    getRandomHero(gameMode = 'all') {
        const availableHeroes = this.getAvailableHeroes(gameMode);
        const randomIndex = Math.floor(Math.random() * availableHeroes.length);
        return availableHeroes[randomIndex];
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥–µ—Ä–æ–µ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
     */
    filterHeroes(criteria = {}) {
        let filteredHeroes = [...this.allHeroes];

        if (criteria.difficulty) {
            filteredHeroes = filteredHeroes.filter(hero => 
                hero.difficulty === criteria.difficulty
            );
        }

        if (criteria.type) {
            filteredHeroes = filteredHeroes.filter(hero => 
                hero.type === criteria.type
            );
        }

        if (criteria.set) {
            filteredHeroes = filteredHeroes.filter(hero => 
                hero.set === criteria.set
            );
        }

        return filteredHeroes;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–µ—Ä–æ—è–º
     */
    getHeroesStats() {
        const stats = {
            total: this.allHeroes.length,
            byDifficulty: {},
            byType: {},
            bySet: {}
        };

        this.allHeroes.forEach(hero => {
            // –ü–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            stats.byDifficulty[hero.difficulty] = (stats.byDifficulty[hero.difficulty] || 0) + 1;
            
            // –ü–æ —Ç–∏–ø—É
            stats.byType[hero.type] = (stats.byType[hero.type] || 0) + 1;
            
            // –ü–æ –Ω–∞–±–æ—Ä—É
            stats.bySet[hero.set] = (stats.bySet[hero.set] || 0) + 1;
        });

        return stats;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
     */
    validateTeam(team) {
        const errors = [];

        if (!team || !Array.isArray(team.heroes)) {
            errors.push('–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –≥–µ—Ä–æ–µ–≤');
        }

        if (team.heroes.length === 0) {
            errors.push('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π');
        }

        if (team.heroes.length > 4) {
            errors.push('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 4 –≥–µ—Ä–æ–µ–≤');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        const heroIds = team.heroes.map(hero => hero.id);
        const uniqueIds = new Set(heroIds);
        if (heroIds.length !== uniqueIds.size) {
            errors.push('–í –∫–æ–º–∞–Ω–¥–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –≥–µ—Ä–æ–µ–≤');
        }

        return {
            isValid: errors.length === 0,
            errors: errors
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ
     */
    getGeneratorInfo() {
        return {
            totalHeroes: this.allHeroes.length,
            baseHeroes: this.heroes.base.length,
            expansionHeroes: this.heroes.expansions.length,
            fixedHero: this.fixedHero,
            stats: this.getHeroesStats()
        };
    }
}
