/**
 * –ú–æ–¥—É–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∫–∞–∑–æ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≥–µ—Ä–æ–µ–≤
 */

export class Results {
    constructor(dependencies = {}) {
        this.storage = dependencies.storage;
        this.toast = dependencies.toast;
        this.modal = dependencies.modal;
        this.currentTeam = null;
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    init() {
        console.log('üìä Results module initialized');
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
     */
    displayTeam(team) {
        try {
            this.currentTeam = team;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            this.showResultsSection();
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.clearResults();
            
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≥–µ—Ä–æ–µ–≤
            this.createHeroCards(team.heroes);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
            this.addTeamInfo(team);
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
            this.scrollToResults();
            
            console.log('üìä Team displayed successfully');
            
        } catch (error) {
            console.error('Error displaying team:', error);
            this.toast.show('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', 'error');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    showResultsSection() {
        const resultsSection = document.getElementById('results-section');
        if (resultsSection) {
            resultsSection.classList.remove('hidden');
            resultsSection.classList.add('animate-fade-in');
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å —Å–µ–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    hideResultsSection() {
        const resultsSection = document.getElementById('results-section');
        if (resultsSection) {
            resultsSection.classList.add('hidden');
            resultsSection.classList.remove('animate-fade-in');
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
     */
    clearResults() {
        const container = document.getElementById('results-container');
        if (container) {
            container.innerHTML = '';
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –≥–µ—Ä–æ–µ–≤
     */
    createHeroCards(heroes) {
        const container = document.getElementById('results-container');
        if (!container) return;

        heroes.forEach((hero, index) => {
            const heroCard = this.createHeroCard(hero, index);
            container.appendChild(heroCard);
        });
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≥–µ—Ä–æ—è
     */
    createHeroCard(hero, index) {
        const card = document.createElement('div');
        card.className = 'hero-card animate-slide-in';
        card.style.animationDelay = `${index * 0.1}s`;
        
        card.innerHTML = `
            <div class="flex items-start justify-between mb-4">
                <div>
                    <h4 class="text-xl font-bold text-white mb-1">${hero.name}</h4>
                    <p class="text-blue-100 text-sm">${hero.set}</p>
                </div>
                <button 
                    class="hero-info-btn p-2 rounded-lg bg-white bg-opacity-20 hover:bg-opacity-30 transition-all duration-200"
                    data-hero-id="${hero.id}"
                    aria-label="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ ${hero.name}"
                >
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                    </svg>
                </button>
            </div>
            
            <div class="space-y-2 mb-4">
                <div class="flex items-center text-blue-100">
                    <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path>
                    </svg>
                    <span class="text-sm">${hero.type}</span>
                </div>
                
                <div class="flex items-center text-blue-100">
                    <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clip-rule="evenodd"></path>
                    </svg>
                    <span class="text-sm">${hero.difficulty}</span>
                </div>
            </div>
            
            <p class="text-blue-100 text-sm leading-relaxed">${hero.description}</p>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const infoBtn = card.querySelector('.hero-info-btn');
        if (infoBtn) {
            infoBtn.addEventListener('click', () => {
                this.showHeroDetails(hero);
            });
        }

        return card;
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
     */
    addTeamInfo(team) {
        const container = document.getElementById('results-container');
        if (!container) return;

        const teamInfo = document.createElement('div');
        teamInfo.className = 'col-span-full bg-gray-100 dark:bg-gray-700 rounded-lg p-4 mt-4';
        
        teamInfo.innerHTML = `
            <div class="flex flex-wrap items-center justify-between gap-4">
                <div class="flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-300">
                    <span class="flex items-center">
                        <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
                        </svg>
                        ${new Date(team.createdAt).toLocaleString('ru-RU')}
                    </span>
                    <span class="flex items-center">
                        <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        ${team.heroCount} –≥–µ—Ä–æ–µ–≤
                    </span>
                    <span class="flex items-center">
                        <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path>
                        </svg>
                        ${this.getGameModeLabel(team.gameMode)}
                    </span>
                </div>
                
                <div class="flex items-center space-x-2">
                    <button 
                        id="save-team-btn"
                        class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white text-sm rounded-lg transition-colors duration-200"
                    >
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </button>
                    <button 
                        id="share-team-btn"
                        class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white text-sm rounded-lg transition-colors duration-200"
                    >
                        –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                    </button>
                    <button 
                        id="export-team-btn"
                        class="px-3 py-1 bg-purple-600 hover:bg-purple-700 text-white text-sm rounded-lg transition-colors duration-200"
                    >
                        –≠–∫—Å–ø–æ—Ä—Ç
                    </button>
                </div>
            </div>
        `;

        container.appendChild(teamInfo);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
        this.setupTeamActionButtons(team);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–º–∞–Ω–¥–æ–π
     */
    setupTeamActionButtons(team) {
        const saveBtn = document.getElementById('save-team-btn');
        const shareBtn = document.getElementById('share-team-btn');
        const exportBtn = document.getElementById('export-team-btn');

        if (saveBtn) {
            saveBtn.addEventListener('click', () => {
                this.saveTeam(team);
            });
        }

        if (shareBtn) {
            shareBtn.addEventListener('click', () => {
                this.shareTeam(team);
            });
        }

        if (exportBtn) {
            exportBtn.addEventListener('click', () => {
                this.exportTeam(team);
            });
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ—Ä–æ–µ
     */
    showHeroDetails(hero) {
        const modalContent = `
            <div class="text-center">
                <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">${hero.name}</h3>
                <div class="space-y-4 text-left">
                    <div>
                        <h4 class="font-semibold text-gray-700 dark:text-gray-300">–ù–∞–±–æ—Ä:</h4>
                        <p class="text-gray-600 dark:text-gray-400">${hero.set}</p>
                    </div>
                    <div>
                        <h4 class="font-semibold text-gray-700 dark:text-gray-300">–¢–∏–ø:</h4>
                        <p class="text-gray-600 dark:text-gray-400">${hero.type}</p>
                    </div>
                    <div>
                        <h4 class="font-semibold text-gray-700 dark:text-gray-300">–°–ª–æ–∂–Ω–æ—Å—Ç—å:</h4>
                        <p class="text-gray-600 dark:text-gray-400">${hero.difficulty}</p>
                    </div>
                    <div>
                        <h4 class="font-semibold text-gray-700 dark:text-gray-300">–û–ø–∏—Å–∞–Ω–∏–µ:</h4>
                        <p class="text-gray-600 dark:text-gray-400">${hero.description}</p>
                    </div>
                </div>
            </div>
        `;

        this.modal.show('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ—Ä–æ–µ', modalContent);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
     */
    saveTeam(team) {
        try {
            this.storage.addToHistory(team);
            this.toast.show('–ö–æ–º–∞–Ω–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é!', 'success');
        } catch (error) {
            console.error('Error saving team:', error);
            this.toast.show('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã', 'error');
        }
    }

    /**
     * –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π
     */
    async shareTeam(team) {
        try {
            const shareData = {
                title: '–ú–æ—è –∫–æ–º–∞–Ω–¥–∞ Unmatched',
                text: `–ú–æ—è —Å–ª—É—á–∞–π–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${team.heroes.map(h => h.name).join(', ')}`,
                url: window.location.href
            };

            if (navigator.share) {
                await navigator.share(shareData);
            } else {
                // Fallback - –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                await navigator.clipboard.writeText(shareData.text);
                this.toast.show('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
            }
        } catch (error) {
            console.error('Error sharing team:', error);
            this.toast.show('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è', 'error');
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥—ã
     */
    exportTeam(team) {
        try {
            const exportData = {
                team: team,
                exportedAt: new Date().toISOString(),
                app: 'Randomatched v1.0.0'
            };

            const dataStr = JSON.stringify(exportData, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });
            
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = `unmatched-team-${team.id}.json`;
            link.click();

            this.toast.show('–ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
        } catch (error) {
            console.error('Error exporting team:', error);
            this.toast.show('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∫–æ–º–∞–Ω–¥—ã', 'error');
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∫—É —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
     */
    getGameModeLabel(gameMode) {
        const labels = {
            'all': '–í—Å–µ –≥–µ—Ä–æ–∏',
            'base': '–ë–∞–∑–æ–≤—ã–µ –≥–µ—Ä–æ–∏',
            'expansions': '–¢–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è'
        };
        return labels[gameMode] || gameMode;
    }

    /**
     * –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
     */
    scrollToResults() {
        const resultsSection = document.getElementById('results-section');
        if (resultsSection) {
            resultsSection.scrollIntoView({ 
                behavior: 'smooth',
                block: 'start'
            });
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –º–∞–∫–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    updateLayout() {
        if (this.currentTeam) {
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
            this.displayTeam(this.currentTeam);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É
     */
    getCurrentTeam() {
        return this.currentTeam;
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É
     */
    clearCurrentTeam() {
        this.currentTeam = null;
        this.hideResultsSection();
    }
}
