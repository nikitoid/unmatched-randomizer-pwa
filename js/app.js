/**
 * Randomatched - Unmatched Randomizer PWA
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
 */

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
import { ThemeManager } from './modules/theme.js';
import { Generator } from './modules/generator.js';
import { Results } from './modules/results.js';
import { Toast } from './modules/toast.js';
import { Storage } from './modules/storage.js';
import { Modal } from './modules/modal.js';

class RandomatchedApp {
    constructor() {
        this.modules = {};
        this.isInitialized = false;
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async init() {
        try {
            console.log('üé≤ Initializing Randomatched...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
            await this.initializeModules();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
            await this.registerServiceWorker();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await this.loadSavedData();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            this.isInitialized = true;
            console.log('‚úÖ Randomatched initialized successfully');
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            this.modules.toast.show('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!', 'success');
            
        } catch (error) {
            console.error('‚ùå Error initializing Randomatched:', error);
            this.modules.toast.show('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
     */
    async initializeModules() {
        // –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º
        this.modules.theme = new ThemeManager();
        
        // –ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.modules.toast = new Toast();
        
        // –ú–µ–Ω–µ–¥–∂–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        this.modules.storage = new Storage();
        
        // –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        this.modules.modal = new Modal();
        
        // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥–µ—Ä–æ–µ–≤
        this.modules.generator = new Generator({
            storage: this.modules.storage,
            toast: this.modules.toast
        });
        
        // –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        this.modules.results = new Results({
            storage: this.modules.storage,
            toast: this.modules.toast,
            modal: this.modules.modal
        });
        
        console.log('üì¶ All modules initialized');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const generateBtn = document.getElementById('generate-btn');
        if (generateBtn) {
            generateBtn.addEventListener('click', () => this.handleGenerate());
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle) {
            themeToggle.addEventListener('click', () => this.modules.theme.toggle());
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const heroCountSelect = document.getElementById('hero-count');
        const gameModeSelect = document.getElementById('game-mode');
        
        if (heroCountSelect) {
            heroCountSelect.addEventListener('change', (e) => {
                this.modules.storage.set('heroCount', e.target.value);
            });
        }
        
        if (gameModeSelect) {
            gameModeSelect.addEventListener('change', (e) => {
                this.modules.storage.set('gameMode', e.target.value);
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ URL
        this.handleURLActions();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
        this.setupKeyboardShortcuts();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', this.debounce(() => {
            this.handleResize();
        }, 250));

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
        window.addEventListener('online', () => {
            this.modules.toast.show('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
        });

        window.addEventListener('offline', () => {
            this.modules.toast.show('–†–∞–±–æ—Ç–∞ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ', 'warning');
        });

        console.log('üéØ Event listeners setup complete');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã
     */
    async handleGenerate() {
        if (!this.isInitialized) {
            this.modules.toast.show('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...', 'warning');
            return;
        }

        try {
            // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showLoading(true);

            // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const heroCount = parseInt(this.modules.storage.get('heroCount', '2'));
            const gameMode = this.modules.storage.get('gameMode', 'all');

            // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
            const team = await this.modules.generator.generateTeam(heroCount, gameMode);

            // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.modules.results.displayTeam(team);

            // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.modules.storage.addToHistory(team);

            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.modules.toast.show(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ ${heroCount} –≥–µ—Ä–æ–µ–≤!`, 'success');

        } catch (error) {
            console.error('Error generating team:', error);
            this.modules.toast.show('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã', 'error');
        } finally {
            this.showLoading(false);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ URL
     */
    handleURLActions() {
        const urlParams = new URLSearchParams(window.location.search);
        const action = urlParams.get('action');

        if (action === 'generate') {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            setTimeout(() => {
                this.handleGenerate();
            }, 1000);
        }

        const hero = urlParams.get('hero');
        if (hero) {
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≥–µ—Ä–æ–µ–º
            this.modules.generator.setFixedHero(hero);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
     */
    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // Ctrl/Cmd + Enter - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                e.preventDefault();
                this.handleGenerate();
            }

            // Ctrl/Cmd + T - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
            if ((e.ctrlKey || e.metaKey) && e.key === 't') {
                e.preventDefault();
                this.modules.theme.toggle();
            }

            // Escape - –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
            if (e.key === 'Escape') {
                this.modules.modal.close();
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
     */
    handleResize() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        if (this.modules.results && this.modules.results.currentTeam) {
            this.modules.results.updateLayout();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoading(show) {
        const overlay = document.getElementById('loading-overlay');
        if (overlay) {
            overlay.classList.toggle('hidden', !show);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadSavedData() {
        try {
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            const heroCount = this.modules.storage.get('heroCount', '2');
            const gameMode = this.modules.storage.get('gameMode', 'all');

            const heroCountSelect = document.getElementById('hero-count');
            const gameModeSelect = document.getElementById('game-mode');

            if (heroCountSelect) heroCountSelect.value = heroCount;
            if (gameModeSelect) gameModeSelect.value = gameMode;

            console.log('üíæ Saved data loaded');
        } catch (error) {
            console.error('Error loading saved data:', error);
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
     */
    async registerServiceWorker() {
        if ('serviceWorker' in navigator) {
            try {
                const registration = await navigator.serviceWorker.register('/sw.js');
                console.log('üîß Service Worker registered:', registration);

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                registration.addEventListener('updatefound', () => {
                    const newWorker = registration.installing;
                    newWorker.addEventListener('statechange', () => {
                        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                            this.modules.toast.show('–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'info', {
                                action: '–û–±–Ω–æ–≤–∏—Ç—å',
                                callback: () => {
                                    newWorker.postMessage({ type: 'SKIP_WAITING' });
                                    window.location.reload();
                                }
                            });
                        }
                    });
                });

            } catch (error) {
                console.error('Service Worker registration failed:', error);
            }
        }
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è debounce
     */
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
     */
    getAppInfo() {
        return {
            name: 'Randomatched',
            version: '1.0.0',
            initialized: this.isInitialized,
            modules: Object.keys(this.modules)
        };
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    window.randomatchedApp = new RandomatchedApp();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { RandomatchedApp };
